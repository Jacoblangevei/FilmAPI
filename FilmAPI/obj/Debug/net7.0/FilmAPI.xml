<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FilmAPI</name>
    </assembly>
    <members>
        <member name="T:FilmAPI.Controllers.CharactersController">
            <summary>
            Provides APIs for performing operations related to Characters.
            </summary>
        </member>
        <member name="M:FilmAPI.Controllers.CharactersController.#ctor(FilmAPI.Services.Characters.ICharacterService,AutoMapper.IMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:FilmAPI.Controllers.CharactersController"/> class.
            </summary>
            <param name="characterService">The character service.</param>
            <param name="mapper">The mapper.</param>
        </member>
        <member name="M:FilmAPI.Controllers.CharactersController.GetCharacters">
            <summary>
            Gets the list of all characters.
            </summary>
            <returns>A list of characters.</returns>
        </member>
        <member name="M:FilmAPI.Controllers.CharactersController.GetCharacter(System.Int32)">
            <summary>
            Gets the character with the specified ID.
            </summary>
            <param name="id">The character's ID.</param>
            <returns>The character with the given ID or NotFound if it doesn't exist.</returns>
        </member>
        <member name="M:FilmAPI.Controllers.CharactersController.PutCharacter(System.Int32,FilmAPI.Data.DTOs.Characters.CharacterPutDTO)">
            <summary>
            Updates the character with the specified ID.
            </summary>
            <param name="id">The character's ID.</param>
            <param name="characterDTO">The character data for updating.</param>
            <returns>NoContent if the operation was successful, BadRequest if IDs mismatch, or NotFound if the character doesn't exist.</returns>
        </member>
        <member name="M:FilmAPI.Controllers.CharactersController.PostCharacter(FilmAPI.Data.DTOs.Characters.CharacterPostDTO)">
            <summary>
            Adds a new character to the database.
            </summary>
            <param name="characterPostDTO">The character data for creation.</param>
            <returns>The created character's details.</returns>
        </member>
        <member name="M:FilmAPI.Controllers.CharactersController.DeleteCharacter(System.Int32)">
            <summary>
            Deletes the character with the specified ID.
            </summary>
            <param name="id">The character's ID.</param>
            <returns>NoContent if the operation was successful or NotFound if the character doesn't exist.</returns>
        </member>
        <member name="T:FilmAPI.Controllers.FranchisesController">
            <summary>
            Provides endpoints to manage franchises.
            </summary>
        </member>
        <member name="M:FilmAPI.Controllers.FranchisesController.#ctor(FilmAPI.Services.Franchises.IFranchiseService,AutoMapper.IMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:FilmAPI.Controllers.FranchisesController"/> class.
            </summary>
            <param name="franchiseService">The franchise service.</param>
            <param name="mapper">The mapper service.</param>
        </member>
        <member name="M:FilmAPI.Controllers.FranchisesController.GetFranchises">
            <summary>
            Retrieves all franchises.
            </summary>
            <returns>A list of franchises in the database.</returns>
            <response code="200">Returns the list of franchises.</response>
            <response code="404">If no franchises are found.</response>
        </member>
        <member name="M:FilmAPI.Controllers.FranchisesController.GetFranchise(System.Int32)">
            <summary>
            Retrieves a specific franchise by its unique identifier.
            </summary>
            <param name="id">The unique identifier of the franchise.</param>
            <returns>The franchise with the specified identifier.</returns>
        </member>
        <member name="M:FilmAPI.Controllers.FranchisesController.FranchiseExistsAsync(System.Int32)">
            <summary>
            Checks if a franchise with the specified identifier exists.
            </summary>
            <param name="id">The unique identifier of the franchise.</param>
            <returns>True if the franchise exists, otherwise false.</returns>
        </member>
        <member name="T:FilmAPI.Controllers.MoviesController">
            <summary>
            Provides endpoints to manage movies.
            </summary>
        </member>
        <member name="M:FilmAPI.Controllers.MoviesController.#ctor(FilmAPI.Services.Films.IMovieService,AutoMapper.IMapper)">
            <summary>
            Initializes a new instance of the <see cref="T:FilmAPI.Controllers.MoviesController"/> class.
            </summary>
            <param name="movieService">The movie service.</param>
            <param name="mapper">The mapper service.</param>
        </member>
        <member name="M:FilmAPI.Controllers.MoviesController.GetMovies">
            <summary>
            Retrieves all movies.
            </summary>
            <returns>A list of movies in the database.</returns>
            <response code="200">Returns the list of movies.</response>
            <response code="404">If no movies are found.</response>
        </member>
        <member name="M:FilmAPI.Controllers.MoviesController.GetMovie(System.Int32)">
            <summary>
            Retrieves a specific movie by its unique identifier.
            </summary>
            <param name="id">The unique identifier of the movie.</param>
            <returns>The movie with the specified identifier.</returns>
        </member>
        <member name="M:FilmAPI.Controllers.MoviesController.PutMovieDTO(System.Int32,FilmAPI.Data.DTOs.Movies.MoviePutDTO)">
            <summary>
            Updates a specific movie's details.
            </summary>
            <param name="id">The unique identifier of the movie.</param>
            <param name="movieUpdateDTO">The updated details of the movie.</param>
        </member>
        <member name="M:FilmAPI.Controllers.MoviesController.PostMovie(FilmAPI.Data.DTOs.Movies.MoviePostDTO)">
            <summary>
            Creates a new movie.
            </summary>
            <param name="moviePostDTO">The details of the new movie.</param>
            <returns>The created movie.</returns>
        </member>
        <member name="M:FilmAPI.Controllers.MoviesController.DeleteMovie(System.Int32)">
            <summary>
            Deletes a specific movie by its unique identifier.
            </summary>
            <param name="id">The unique identifier of the movie to delete.</param>
        </member>
        <member name="M:FilmAPI.Controllers.MoviesController.MovieExistsAsync(System.Int32)">
            <summary>
            Checks if a movie with the specified identifier exists.
            </summary>
            <param name="id">The unique identifier of the movie.</param>
            <returns>True if the movie exists, otherwise false.</returns>
        </member>
        <member name="T:FilmAPI.Migrations.initialDb">
            <inheritdoc />
        </member>
        <member name="M:FilmAPI.Migrations.initialDb.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:FilmAPI.Migrations.initialDb.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:FilmAPI.Migrations.initialDb.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:FilmAPI.Migrations.newMigration">
            <inheritdoc />
        </member>
        <member name="M:FilmAPI.Migrations.newMigration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:FilmAPI.Migrations.newMigration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:FilmAPI.Migrations.newMigration.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:FilmAPI.Migrations.finalmigration">
            <inheritdoc />
        </member>
        <member name="M:FilmAPI.Migrations.finalmigration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:FilmAPI.Migrations.finalmigration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:FilmAPI.Migrations.finalmigration.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:FilmAPI.Migrations.newDb">
            <inheritdoc />
        </member>
        <member name="M:FilmAPI.Migrations.newDb.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:FilmAPI.Migrations.newDb.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:FilmAPI.Migrations.newDb.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="M:FilmAPI.Services.Franchises.IFranchiseService.GetFranchisesAsync">
            <summary>
            Retrieves all franchises from the database.
            </summary>
            <returns>A list of all franchises.</returns>
        </member>
        <member name="M:FilmAPI.Services.Franchises.IFranchiseService.GetFranchiseByIdAsync(System.Int32)">
            <summary>
            Retrieves a franchise from the database based on its unique identifier.
            </summary>
            <param name="id">The unique identifier of the franchise.</param>
            <returns>The franchise with the specified identifier, or null if it doesn't exist.</returns>
        </member>
        <member name="M:FilmAPI.Services.Franchises.IFranchiseService.AddFranchiseAsync(FilmAPI.Data.Models.Franchise)">
            <summary>
            Adds a new franchise to the database.
            </summary>
            <param name="franchise">The franchise entity to add.</param>
            <returns>A task representing the asynchronous add operation.</returns>
        </member>
        <member name="M:FilmAPI.Services.Franchises.IFranchiseService.UpdateFranchiseAsync(FilmAPI.Data.Models.Franchise)">
            <summary>
            Updates the details of an existing franchise in the database.
            </summary>
            <param name="franchise">The franchise entity with updated details.</param>
            <returns>A task representing the asynchronous update operation.</returns>
        </member>
        <member name="M:FilmAPI.Services.Franchises.IFranchiseService.DeleteFranchiseAsync(System.Int32)">
            <summary>
            Deletes a franchise from the database based on its unique identifier.
            </summary>
            <param name="id">The unique identifier of the franchise to delete.</param>
            <returns>A task representing the asynchronous delete operation.</returns>
        </member>
    </members>
</doc>
